import csv

def carregar_usuarios():
    usuarios = []
    try:
        with open('usuarios.csv', newline='', encoding='utf-8') as arquivo:
            leitor = csv.DictReader(arquivo)
            for linha in leitor:
                usuarios.append(linha)
    except FileNotFoundError:
        print("Arquivo 'usuarios.csv' n√£o encontrado.")
    return usuarios

def salvar_usuarios(usuarios):
    with open('usuarios.csv', 'w', newline='', encoding='utf-8') as arquivo:
        campos = ['nome', 'senha', 'cargo']
        escritor = csv.DictWriter(arquivo, fieldnames=campos)
        escritor.writeheader()
        for u in usuarios:
            escritor.writerow(u)

def cadastrar_usuario(usuarios):
    nome = input("Nome: ")
    senha = input("Senha: ")
    cargo = input("Cargo (gerente, funcionario, etc.): ")
    usuarios.append({"nome": nome, "senha": senha, "cargo": cargo})
    salvar_usuarios(usuarios)
    print("‚úÖ Usu√°rio cadastrado!")

def login(usuarios):
    nome = input("Nome de usu√°rio: ")
    senha = input("Senha: ")
    for u in usuarios:
        if u['nome'] == nome and u['senha'] == senha:
            print(f"‚úÖ Login bem-sucedido como {u['cargo']}")
            return u
    print("‚ùå Login inv√°lido.")
    return None

def listar_usuarios(usuarios):
    print("\nüìã Lista de Usu√°rios:")
    for i, u in enumerate(usuarios):
        print(f"{i+1}. Nome: {u['nome']} | Cargo: {u['cargo']}")

def atualizar_usuario(usuarios):
    listar_usuarios(usuarios)
    nome = input("\nDigite o nome do usu√°rio que deseja atualizar: ")
    for u in usuarios:
        if u['nome'] == nome:
            u['senha'] = input("Nova senha: ")
            u['cargo'] = input("Novo cargo: ")
            salvar_usuarios(usuarios)
            print("‚úÖ Usu√°rio atualizado com sucesso!")
            return
    print("‚ùå Usu√°rio n√£o encontrado.")

def deletar_usuario(usuarios):
    listar_usuarios(usuarios)
    nome = input("\nDigite o nome do usu√°rio que deseja deletar: ")
    for u in usuarios:
        if u['nome'] == nome:
            usuarios.remove(u)
            salvar_usuarios(usuarios)
            print("üóëÔ∏è Usu√°rio deletado com sucesso!")
            return
    print("‚ùå Usu√°rio n√£o encontrado.")

def menu_gerenciar_usuarios(usuarios):
    while True:
        print("\nüë• Gerenciamento de Usu√°rios")
        print("1. Listar usu√°rios")
        print("2. Atualizar usu√°rio")
        print("3. Deletar usu√°rio")
        print("0. Voltar")
        opcao = input("Escolha uma op√ß√£o: ")
        if opcao == '1':
            listar_usuarios(usuarios)
        elif opcao == '2':
            atualizar_usuario(usuarios)
        elif opcao == '3':
            deletar_usuario(usuarios)
        elif opcao == '0':
            break
        else:
            print("Op√ß√£o inv√°lida.")

def carregar_produtos():
    produtos = []
    try:
        with open('produtos.csv', newline='', encoding='utf-8') as arquivo:
            leitor = csv.DictReader(arquivo)
            for linha in leitor:
                linha['preco'] = float(linha['preco'])
                linha['quantidade'] = int(linha['quantidade'])
                produtos.append(linha)
    except FileNotFoundError:
        print("Arquivo 'produtos.csv' n√£o encontrado.")
    return produtos

def salvar_produtos(produtos):
    with open('produtos.csv', 'w', newline='', encoding='utf-8') as arquivo:
        campos = ['codigo', 'nome', 'preco', 'quantidade']
        escritor = csv.DictWriter(arquivo, fieldnames=campos)
        escritor.writeheader()
        for p in produtos:
            escritor.writerow(p)

def listar_produtos(produtos):
    print("\nüì¶ Produtos cadastrados:")
    for p in produtos:
        print(f"C√≥digo: {p['codigo']} | Nome: {p['nome']} | Pre√ßo: R${p['preco']:.2f} | Quantidade: {p['quantidade']}")

def criar_produto(produtos):
    codigo = input("C√≥digo do produto: ")
    nome = input("Nome: ")
    preco = float(input("Pre√ßo: "))
    quantidade = int(input("Quantidade: "))
    produtos.append({'codigo': codigo, 'nome': nome, 'preco': preco, 'quantidade': quantidade})
    salvar_produtos(produtos)
    print("‚úÖ Produto cadastrado!")

def atualizar_produto(produtos):
    codigo = input("Digite o c√≥digo do produto a atualizar: ")
    for p in produtos:
        if p['codigo'] == codigo:
            p['nome'] = input("Novo nome: ")
            p['preco'] = float(input("Novo pre√ßo: "))
            p['quantidade'] = int(input("Nova quantidade: "))
            salvar_produtos(produtos)
            print("‚úÖ Produto atualizado!")
            return
    print("‚ùå Produto n√£o encontrado.")

def deletar_produto(produtos):
    codigo = input("Digite o c√≥digo do produto a deletar: ")
    for p in produtos:
        if p['codigo'] == codigo:
            produtos.remove(p)
            salvar_produtos(produtos)
            print("üóëÔ∏è Produto deletado!")
            return
    print("‚ùå Produto n√£o encontrado.")

def buscar_produto(produtos):
    nome = input("Digite o nome do produto: ").lower()
    encontrados = [p for p in produtos if nome in p['nome'].lower()]
    if encontrados:
        for p in encontrados:
            print(f"‚úÖ C√≥digo: {p['codigo']} | Nome: {p['nome']} | Pre√ßo: R${p['preco']} | Quantidade: {p['quantidade']}")
    else:
        print("üîç Nenhum produto encontrado.")

def ordenar_por_nome(produtos):
    ordenados = sorted(produtos, key=lambda x: x['nome'].lower())
    listar_produtos(ordenados)

def ordenar_por_preco(produtos):
    ordenados = sorted(produtos, key=lambda x: x['preco'])
    listar_produtos(ordenados)

def menu_produtos(cargo):
    produtos = carregar_produtos()
    while True:
        print("\nüì¶ Menu de Produtos")
        print("1. Listar produtos")
        print("2. Buscar produto por nome")
        print("3. Ordenar por nome")
        print("4. Ordenar por pre√ßo")
        if cargo in ['gerente', 'funcionario']:
            print("5. Cadastrar novo produto")
            print("6. Atualizar produto")
            print("7. Deletar produto")
        print("0. Voltar")

        opcao = input("Escolha uma op√ß√£o: ")

        if opcao == '1':
            listar_produtos(produtos)
        elif opcao == '2':
            buscar_produto(produtos)
        elif opcao == '3':
            ordenar_por_nome(produtos)
        elif opcao == '4':
            ordenar_por_preco(produtos)
        elif opcao == '5' and cargo in ['gerente', 'funcionario']:
            criar_produto(produtos)
        elif opcao == '6' and cargo in ['gerente', 'funcionario']:
            atualizar_produto(produtos)
        elif opcao == '7' and cargo in ['gerente', 'funcionario']:
            deletar_produto(produtos)
        elif opcao == '0':
            break
        else:
            print("Op√ß√£o inv√°lida ou sem permiss√£o.")



def menu_usuario(usuario):
    cargo = usuario['cargo']
    while True:
        print("\nüìã Menu Interno")
        print("1. Acessar produtos/servi√ßos")
        if cargo == 'gerente':
            print("2. Gerenciar usu√°rios")
        print("0. Logout")

        opcao = input("Digite o n√∫mero da op√ß√£o desejada: ")

        if opcao == '0':
            print("Saindo do sistema...")
            break
        elif opcao == '1':
            menu_produtos(cargo)
        elif opcao == '2' and cargo == 'gerente':
            usuarios = carregar_usuarios()
            menu_gerenciar_usuarios(usuarios)
        else:
            print("Op√ß√£o inv√°lida ou sem permiss√£o.")

def menu_principal():
    usuarios = carregar_usuarios()
    while True:
        print("\n==== Sistema de Gerenciamento ====")
        print("1. Login")
        print("2. Cadastrar novo usu√°rio")
        print("0. Sair")

        opcao = input("Escolha uma op√ß√£o: ")

        if opcao == '1':
            usuario = login(usuarios)
            if usuario:
                menu_usuario(usuario)
        elif opcao == '2':
            cadastrar_usuario(usuarios)
        elif opcao == '0':
            print("Encerrando...")
            break
        else:
            print("Op√ß√£o inv√°lida.")



menu_principal()
